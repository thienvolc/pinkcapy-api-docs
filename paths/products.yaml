paths:
  /products/{id}:
    get:
      summary: Get product
      description: Retrieve a product by its ID.
      tags: [Product]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        $ref: '../components/schemas/product/product_public.yaml'
        '404':
          $ref: '../components/responses/error.yaml#/NotFound'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

  /products:
    get:
      summary: Search products
      description: Retrieve a list of products based on search criteria.
      tags: [Product]
      parameters:
        - name: offset
          in: query
          required: true
          description: Currect offset to retrieve
          default: 1
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          required: true
          description: Limit number of results
          default: 10
          schema:
            type: integer
            example: 10
        - name: sort
          in: query
          description: Sort order
          schema:
            type: string
            format: '<sort_field>:<order>'
            example: 'created_at:desc'
        - name: query
          in: query
          description: Search keyword
          schema:
            type: string
            example: "tai nghe"
        - name: category
          in: query
          description: Category ID of the products
          schema:
            type: integer
            example: 3
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '../components/schemas/core/infinite_response.yaml'
                          - type: object
                            properties:
                              data:
                                items:
                                  $ref: '../components/schemas/product/product_public.yaml'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

  /manage/products/{id}:
    get:
      summary: Get product for admin
      description: Retrieve a product by its ID for admin.
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to retrieve
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        $ref: '../components/schemas/product/product.yaml'
        '404':
          $ref: '../components/responses/error.yaml#/NotFound'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

    put:
      summary: Update a product
      description: Admin to update an existing product in the system.
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../components/schemas/product/product.yaml'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        $ref: '../components/schemas/product/product.yaml'
        '400':
          $ref: '../components/responses/error.yaml#/BadRequest'
        '401':
          $ref: '../components/responses/error.yaml#/Unauthorized'
        '404':
          $ref: '../components/responses/error.yaml#/NotFound'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

    delete:
      summary: Delete a product
      description: Admin to delete an existing product in the system.
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the product to delete
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        $ref: '../components/schemas/product/product.yaml'
        '400':
          $ref: '../components/responses/error.yaml#/BadRequest'
        '401':
          $ref: '../components/responses/error.yaml#/Unauthorized'
        '404':
          $ref: '../components/responses/error.yaml#/NotFound'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

  /manage/products:
    post:
      summary: Create a product
      description: Admin to add a new product to the system.
      tags: [Product]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../components/schemas/product/product.yaml'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        $ref: '../components/schemas/product/product.yaml'
        '400':
          $ref: '../components/responses/error.yaml#/BadRequest'
        '401':
          $ref: '../components/responses/error.yaml#/Unauthorized'
        '404':
          $ref: '../components/responses/error.yaml#/NotFound'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'

    get:
      summary: Search products for admin
      description: Retrieve a list of products based on search criteria.
      tags: [Product]
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          required: true
          description: Page number to retrieve
          default: 1
          schema:
            type: integer
            example: 1
        - name: size
          in: query
          required: true
          description: Number of results per page
          default: 10
          schema:
            type: integer
            example: 10
        - name: sort
          in: query
          required: false
          description: Sort order
          schema:
            type: string
            format: '<sort_field>:<order>'
            example: 'created_at:desc'
        - name: query
          in: query
          description: Search keyword
          schema:
            type: string
            example: "tai nghe"
        - name: category
          in: query
          description: Category ID of the products
          schema:
            type: integer
            example: 3
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../components/schemas/core/response.yaml'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '../components/schemas/core/pagination_response.yaml'
                          - type: object
                            properties:
                              data:
                                type: array
                                items:
                                  $ref: '../components/schemas/product/product.yaml'
        '401':
          $ref: '../components/responses/error.yaml#/Unauthorized'
        '500':
          $ref: '../components/responses/error.yaml#/InternalServerError'
